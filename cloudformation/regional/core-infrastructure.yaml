AWSTemplateFormatVersion: '2010-09-09'
Description: 'Core infrastructure for multi-tenant logging - S3, DynamoDB, KMS, and IAM'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues: [production, staging, development]
    Description: Environment name

  ProjectName:
    Type: String
    Default: multi-tenant-logging
    Description: Name of the project for resource naming

  S3DeleteAfterDays:
    Type: Number
    Default: 7
    MinValue: 1
    Description: Number of days after which to delete logs from S3

  EnableS3Encryption:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable S3 server-side encryption


  CentralLogDistributionRoleArn:
    Type: String
    Description: ARN of the central log distribution role from global stack
    AllowedPattern: '^arn:aws:iam::[0-9]{12}:role/ROSA-CentralLogDistributionRole-[a-f0-9]{8}$'
    ConstraintDescription: Must be a valid IAM role ARN matching pattern

Conditions:
  IsS3EncryptionEnabled: !Equals [!Ref EnableS3Encryption, "true"]

Resources:

  # KMS Key for encryption (conditional)
  LoggingKMSKey:
    Type: AWS::KMS::Key
    Condition: IsS3EncryptionEnabled
    Properties:
      Description: KMS key for multi-tenant logging encryption
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key for S3
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
          - Sid: Allow use of the key for Lambda
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
      EnableKeyRotation: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-kms-key'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  LoggingKMSKeyAlias:
    Type: AWS::KMS::Alias
    Condition: IsS3EncryptionEnabled
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-${Environment}-logging'
      TargetKeyId: !Ref LoggingKMSKey

  # Central S3 Bucket for log storage
  CentralLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !If [IsS3EncryptionEnabled, 'aws:kms', 'AES256']
              KMSMasterKeyID: !If [IsS3EncryptionEnabled, !Ref LoggingKMSKey, !Ref 'AWS::NoValue']
            BucketKeyEnabled: !If [IsS3EncryptionEnabled, true, false]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfterNDays
            Status: Enabled
            ExpirationInDays: !Ref S3DeleteAfterDays
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref LogDeliveryTopic
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: .gz
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-central-logging'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation


  # SNS topic for log delivery notifications
  LogDeliveryTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${Environment}-log-delivery'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # SNS topic policy to allow S3 to publish messages
  LogDeliveryTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref LogDeliveryTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3Publish
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref LogDeliveryTopic
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:aws:s3:::${ProjectName}-${Environment}-${AWS::AccountId}-${AWS::Region}'



  # S3 Access Log Group
  S3AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-${Environment}-access'
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # DynamoDB Table for tenant delivery configurations
  # Uses composite key: tenant_id (PK) + type (SK) for multi-delivery support
  TenantConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-tenant-configs'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tenant_id
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: tenant_id
          KeyType: HASH
        - AttributeName: type
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: !If [IsS3EncryptionEnabled, KMS, !Ref 'AWS::NoValue']
        KMSMasterKeyId: !If [IsS3EncryptionEnabled, !Ref LoggingKMSKey, !Ref 'AWS::NoValue']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-tenant-configs'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: Schema
          Value: composite-key-v2


  # Central S3 Writer Role for cross-account S3 access
  CentralS3WriterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-central-s3-writer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3WriterPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub '${CentralLoggingBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !GetAtt CentralLoggingBucket.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt LoggingKMSKey.Arn
                Condition:
                  StringEquals:
                    'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # Managed Policy for Vector agents to assume S3 writer role
  VectorAssumeRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${ProjectName}-${Environment}-vector-assume-role-policy'
      Description: 'Policy allowing Vector agents to assume the central S3 writer role'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: !GetAtt CentralS3WriterRole.Arn

  # Regional IAM Role for accessing regional resources
  RegionalLogProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-regional-processor-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Ref CentralLogDistributionRoleArn
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: RegionalProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                Resource: !GetAtt TenantConfigTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${CentralLoggingBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt LoggingKMSKey.Arn
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

Outputs:
  CentralLoggingBucketName:
    Description: Name of the central logging S3 bucket
    Value: !Ref CentralLoggingBucket
    Export:
      Name: !Sub '${AWS::StackName}-CentralLoggingBucketName'
  CentralLoggingBucketArn:
    Description: ARN of the central logging S3 bucket
    Value: !GetAtt CentralLoggingBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CentralLoggingBucketArn'

  TenantConfigTableName:
    Description: Name of the tenant configuration DynamoDB table
    Value: !Ref TenantConfigTable
    Export:
      Name: !Sub '${AWS::StackName}-TenantConfigTableName'

  TenantConfigTableArn:
    Description: ARN of the tenant configuration DynamoDB table
    Value: !GetAtt TenantConfigTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TenantConfigTableArn'

  # SNS Outputs
  LogDeliveryTopicArn:
    Description: ARN of the log delivery SNS topic
    Value: !Ref LogDeliveryTopic
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryTopicArn'

  # KMS Outputs (conditional)
  KMSKeyId:
    Description: KMS key ID for encryption
    Value: !If [IsS3EncryptionEnabled, !Ref LoggingKMSKey, '']
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  KMSKeyArn:
    Description: KMS key ARN for encryption
    Value: !If [IsS3EncryptionEnabled, !GetAtt LoggingKMSKey.Arn, '']
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'


  CentralS3WriterRoleArn:
    Description: ARN of the Central S3 Writer IAM role
    Value: !GetAtt CentralS3WriterRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CentralS3WriterRoleArn'

  VectorAssumeRolePolicyArn:
    Description: ARN of the managed policy for Vector agents to assume S3 writer role
    Value: !Ref VectorAssumeRolePolicy
    Export:
      Name: !Sub '${AWS::StackName}-VectorAssumeRolePolicyArn'

  RegionalLogProcessorRoleArn:
    Description: ARN of the regional log processor IAM role
    Value: !GetAtt RegionalLogProcessorRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RegionalLogProcessorRoleArn'

  CentralLogDistributionRoleArn:
    Description: ARN of the central log distribution role (from global stack)
    Value: !Ref CentralLogDistributionRoleArn
    Export:
      Name: !Sub '${AWS::StackName}-CentralLogDistributionRoleArn'

