apiVersion: v1
kind: Secret
metadata:
  name: minio-credentials
  namespace: default
type: Opaque
stringData:
  access-key: "minioadmin"
  secret-key: "minioadmin"

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: default
  labels:
    app: minio
spec:
  selector:
    app: minio
  ports:
  - name: api
    port: 9000
    targetPort: 9000
  - name: console
    port: 9001
    targetPort: 9001
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: default
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        command:
        - /bin/bash
        - -c
        args:
        - minio server /data --console-address ":9001"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: access-key
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: secret-key
        ports:
        - containerPort: 9000
          name: api
        - containerPort: 9001
          name: console
        volumeMounts:
        - name: data
          mountPath: /data
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: data
        emptyDir: {}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-setup
  namespace: default
  labels:
    app: minio-setup
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: mc
        image: minio/mc:latest
        command:
        - /bin/bash
        - -c
        args:
        - |
          # Wait for MinIO to be ready
          until mc alias set minio http://minio:9000 minioadmin minioadmin; do
            echo "Waiting for MinIO to be ready..."
            sleep 5
          done
          
          # Create source bucket (where Vector writes logs)
          mc mb minio/test-logs --ignore-existing
          echo "Created source bucket: test-logs"
          
          # Create destination buckets (where processor copies logs)
          mc mb minio/customer-logs --ignore-existing
          echo "Created destination bucket: customer-logs"
          
          mc mb minio/acme-corp-logs --ignore-existing
          echo "Created destination bucket: acme-corp-logs"
          
          mc mb minio/multi-delivery-bucket --ignore-existing
          echo "Created destination bucket: multi-delivery-bucket"
          
          # Set bucket policies to allow read/write access
          mc anonymous set download minio/test-logs
          mc anonymous set download minio/customer-logs
          mc anonymous set download minio/acme-corp-logs
          mc anonymous set download minio/multi-delivery-bucket
          
          echo "MinIO setup complete with source and destination buckets"
        env:
        - name: MC_HOST_minio
          value: "http://minioadmin:minioadmin@minio:9000"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"